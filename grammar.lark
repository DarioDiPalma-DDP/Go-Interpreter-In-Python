?program: statement+

?statement: declaration
          | bool_logic
          | if_stmt
          | for_stmnt
          | IDENTIFIER "(" expression ")" -> call

block_statement: "{" statement* "}"

?bool_logic: relation
          | "(" bool_logic ")"
          | bool_logic "&&" bool_logic -> bool_and
          | bool_logic "||" bool_logic -> bool_or
          | "!" bool_logic -> bool_not

?relation: "(" relation ")"
        | expression "<" expression -> less
        | expression ">" expression -> great
        | expression ">=" expression -> great_eq
        | expression "<=" expression -> less_eq
        | expression "==" expression -> equal
        | expression "!=" expression -> not_equal

expression: term
          | expression "+" expression -> addition
          | expression "-" expression -> subtraction

term: factor
    | factor "*" factor -> multiplication
    | factor "/" factor -> division

factor: NUMBER
      | IDENTIFIER
      | STRING
      | IDENTIFIER "[" expression "]" -> index

// Variable declarations and assignment
?declaration: "var" ident_list (DATA_TYPE ("=" expression_list)? | "=" expression_list) -> assignment
           | ident_list ":=" expression_list -> short_assignment
           | ident_list ":=" array_type "{" expression_list "}" -> array_assignment

// Data types
DATA_TYPE: "int" | "string" | "bool"

ident_list: IDENTIFIER ("," IDENTIFIER)*
expression_list: expression ("," expression)*
array_type: "[" NUMBER "]" DATA_TYPE

// If Statement
if_stmt: "if" bool_logic block_statement ("else" (if_stmt|block_statement))?

// For Statement
for_stmnt: "for" bool_logic block_statement -> while_loop
         | "for" declaration ";" bool_logic ";" IDENTIFIER "++" block_statement -> for_loop

// String type, enclosed by double quotes (ex. "ciao")
STRING : /".*?(?<!\\)"/

// Import terminals from common library
%import common.CNAME -> IDENTIFIER
%import common.NUMBER
%import common.WS

%ignore WS