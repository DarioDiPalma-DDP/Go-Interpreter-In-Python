?statement: declaration
          | expression
          | if_stmnt
          //| "for" relation block_statement -> while_loop
          //| "for" short_declare ";" relation ";" IDENTIFIER "++" block_statement -> for_loop
          //| IDENTIFIER "(" expression ")" -> call
          //| relation


block_statement: "{" statement* "}"

//condition: "(" relation ")"

bool_logic: relation (("&&"|"||") relation)?
          | "!"expression

relation: expression "<" expression -> less
        | expression ">" expression -> great
        | expression ">=" expression
        | expression "<=" expression
        | expression "==" expression
        | expression "!=" expression

expression: term
          | expression "+" expression -> addition
          | expression "-" expression -> subtraction

term: factor 
    | factor "*" factor -> multiplication
    | factor "/" factor -> division

factor: 
      | NUMBER
      | IDENTIFIER
      | STRING
      //| bool_logic //condition


//expression: unary_expr | expression binary_op expression
//unary_expr: primary_expr | unary_op unary_expr
//binary_op: "||" | "&&" | rel_op | add_op | mul_op
//rel_op: "==" | "!=" | "<" | "<=" | ">" | ">="
//add_op: "+" | "-"
//mul_op: "*" | "/"
//unary_op: "+" | "-" | "!" | "*"
//inc_dec_stmnt: expression("++"|"--")

//primary_expr: operand

//operand: literal | operand_name | "(" expression ")"
//literal: basic_lit //| composite_lit
//basic_lit: NUMBER | STRING
//operand_name: IDENTIFIER

//composite_lit: array_type


// Variable declarations
declaration: var_declare
           | short_declare
// Supported type
DATA_TYPE: "int" | "string" | "bool"
// var x = 0 || var b,c int = 1,3
var_declare: "var" ident_list (DATA_TYPE ("=" expression_list)? | "=" expression_list) -> assignment
ident_list: IDENTIFIER ("," IDENTIFIER)*
expression_list: expression ("," expression)*
// x := 2
short_declare: ident_list ":=" expression_list -> short_assignment

// If Statement
if_stmnt: "if" (expression";")? expression block_statement ("else" (if_stmnt|block_statement))? 

// String type, enclosed by double quotes (ex. "ciao")
STRING : /".*?(?<!\\)"/
// Import terminals from common library
%import common.CNAME -> IDENTIFIER
%import common.NUMBER
%import common.WS

%ignore WS