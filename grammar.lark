?statement: "if" condition block_statement -> conditional
          | "if" condition block_statement "else" block_statement -> if_else
          | "if" condition block_statement "else if" condition block_statement -> if_elseif
          | "if" condition block_statement "else if" condition block_statement "else" block_statement -> if_elseif_else
          | "for" relation block_statement -> while_loop
          | "for" short_declare ";" relation ";" IDENTIFIER "++" block_statement -> for_loop
          | IDENTIFIER "(" expression ")" -> call
          | expression
          | relation
          | declaration 

block_statement: "{" statement* "}"

condition: "(" relation ")"

relation: expression "<" expression -> less
        | expression ">" expression -> great

expression: term
          | expression "+" expression -> addition
          | expression "-" expression -> subtraction

term: factor 
    | factor "*" factor -> multiplication
    | factor "/" factor -> division

factor: IDENTIFIER
      | NUMBER
      | condition
      | STRING

// String type, enclosed by double quotes (ex. "ciao")
STRING : /".*?(?<!\\)"/

// Variable declarations
declaration: var_declare
           | short_declare
// Supported type
DATA_TYPE: "int" | "string" | "bool"
// var x = 0 || var b,c int = 1,3
var_declare: "var" ident_list (DATA_TYPE ("=" expression_list)? | "=" expression_list) -> assignment
ident_list: IDENTIFIER ("," IDENTIFIER)*
expression_list: expression ("," expression)*
// x := 2
short_declare: ident_list ":=" expression_list -> short_assignment

// Import terminals from common library
%import common.CNAME -> IDENTIFIER
%import common.NUMBER
%import common.WS

%ignore WS